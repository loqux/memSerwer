{"ast":null,"code":"const url = \"http://localhost:3004/mems/\";\nexport function getMems() {\n  return fetch(url).then(handleResponse).catch(handleError);\n}\nexport function addMem(mem) {\n  return fetch(url, {\n    method: \"POST\",\n    // POST for create, PUT to update when id already exists.\n    headers: {\n      \"content-type\": \"application/json\"\n    },\n    body: JSON.stringify(mem)\n  }).then(handleResponse).catch(handleError);\n}\nexport function updateMem(mem) {\n  return fetch(url + mem.id, {\n    method: \"PUT\",\n    headers: {\n      \"content-type\": \"application/json\"\n    },\n    body: JSON.stringify(mem)\n  }).then(handleResponse).catch(handleError);\n}\nexport async function handleResponse(response) {\n  if (response.ok) return response.json();\n\n  if (response.status === 400) {\n    // So, a server-side validation error occurred.\n    // Server side validation returns a string error message, so parse as text instead of json.\n    const error = await response.text();\n    throw new Error(error);\n  }\n\n  throw new Error(\"Network response was not ok.\");\n} // In a real app, would likely call an error logging service.\n\nexport function handleError(error) {\n  // eslint-disable-next-line no-console\n  console.error(\"API call failed. \" + error);\n  throw error;\n}","map":{"version":3,"sources":["C:/Users/amielnic/Desktop/angular/mem-serwice/mem-service/src/api/memsApi.js"],"names":["url","getMems","fetch","then","handleResponse","catch","handleError","addMem","mem","method","headers","body","JSON","stringify","updateMem","id","response","ok","json","status","error","text","Error","console"],"mappings":"AAAA,MAAMA,GAAG,GAAG,6BAAZ;AAEA,OAAO,SAASC,OAAT,GAAmB;AACxB,SAAOC,KAAK,CAACF,GAAD,CAAL,CAAWG,IAAX,CAAgBC,cAAhB,EAAgCC,KAAhC,CAAsCC,WAAtC,CAAP;AACD;AAED,OAAO,SAASC,MAAT,CAAgBC,GAAhB,EAAqB;AAC1B,SAAON,KAAK,CAACF,GAAD,EAAM;AAChBS,IAAAA,MAAM,EAAE,MADQ;AACA;AAChBC,IAAAA,OAAO,EAAE;AAAE,sBAAgB;AAAlB,KAFO;AAGhBC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeL,GAAf;AAHU,GAAN,CAAL,CAKJL,IALI,CAKCC,cALD,EAMJC,KANI,CAMEC,WANF,CAAP;AAOD;AAED,OAAO,SAASQ,SAAT,CAAmBN,GAAnB,EAAwB;AAC7B,SAAON,KAAK,CAACF,GAAG,GAAGQ,GAAG,CAACO,EAAX,EAAe;AACzBN,IAAAA,MAAM,EAAE,KADiB;AAEzBC,IAAAA,OAAO,EAAE;AAAE,sBAAgB;AAAlB,KAFgB;AAGzBC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeL,GAAf;AAHmB,GAAf,CAAL,CAKJL,IALI,CAKCC,cALD,EAMJC,KANI,CAMEC,WANF,CAAP;AAOD;AAED,OAAO,eAAeF,cAAf,CAA8BY,QAA9B,EAAwC;AAC7C,MAAIA,QAAQ,CAACC,EAAb,EAAiB,OAAOD,QAAQ,CAACE,IAAT,EAAP;;AACjB,MAAIF,QAAQ,CAACG,MAAT,KAAoB,GAAxB,EAA6B;AAC3B;AACA;AACA,UAAMC,KAAK,GAAG,MAAMJ,QAAQ,CAACK,IAAT,EAApB;AACA,UAAM,IAAIC,KAAJ,CAAUF,KAAV,CAAN;AACD;;AACD,QAAM,IAAIE,KAAJ,CAAU,8BAAV,CAAN;AACD,C,CAED;;AACA,OAAO,SAAShB,WAAT,CAAqBc,KAArB,EAA4B;AACjC;AACAG,EAAAA,OAAO,CAACH,KAAR,CAAc,sBAAsBA,KAApC;AACA,QAAMA,KAAN;AACD","sourcesContent":["const url = \"http://localhost:3004/mems/\";\n\nexport function getMems() {\n  return fetch(url).then(handleResponse).catch(handleError);\n}\n\nexport function addMem(mem) {\n  return fetch(url, {\n    method: \"POST\", // POST for create, PUT to update when id already exists.\n    headers: { \"content-type\": \"application/json\" },\n    body: JSON.stringify(mem),\n  })\n    .then(handleResponse)\n    .catch(handleError);\n}\n\nexport function updateMem(mem) {\n  return fetch(url + mem.id, {\n    method: \"PUT\",\n    headers: { \"content-type\": \"application/json\" },\n    body: JSON.stringify(mem),\n  })\n    .then(handleResponse)\n    .catch(handleError);\n}\n\nexport async function handleResponse(response) {\n  if (response.ok) return response.json();\n  if (response.status === 400) {\n    // So, a server-side validation error occurred.\n    // Server side validation returns a string error message, so parse as text instead of json.\n    const error = await response.text();\n    throw new Error(error);\n  }\n  throw new Error(\"Network response was not ok.\");\n}\n\n// In a real app, would likely call an error logging service.\nexport function handleError(error) {\n  // eslint-disable-next-line no-console\n  console.error(\"API call failed. \" + error);\n  throw error;\n}\n"]},"metadata":{},"sourceType":"module"}