{"ast":null,"code":"import * as action from \"./actionsType\";\nimport * as memsApi from \"../../api/memsApi\";\nexport function updateMemSuccess(mem) {\n  return {\n    type: action.UPDATE_MEM,\n    mem\n  };\n}\nexport function addMemSuccess(mem) {\n  return {\n    type: action.ADD_MEM,\n    payload: mem\n  };\n}\nexport function memsFetchedSuccess(mems) {\n  return {\n    type: action.FETCH_MEMS_SUCCESS,\n    payload: mems\n  };\n}\nexport function memsFetched() {\n  return function (dispatch) {\n    return memsApi.getMems().then(mems => {\n      dispatch(memsFetchedSuccess(mems));\n    }).catch(error => {\n      throw error;\n    });\n  };\n}\nexport function updateMem(mem) {\n  return function (dispatch) {\n    console.log(\"Tutaj już wrzucam do bazy\", mem);\n    return memsApi.updateMem(mem).then(changeMem => {\n      dispatch(updateMemSuccess(changeMem));\n    }).catch(error => {\n      throw error;\n    });\n  };\n}\nexport function addMem(mem) {\n  return function (dispatch) {\n    return memsApi.postMem(mem).then(addedMem => {\n      dispatch(addMemSuccess(addedMem));\n    }).catch(error => {\n      throw error;\n    });\n  };\n}","map":{"version":3,"sources":["C:/Users/amielnic/Desktop/angular/mem-serwice/mem-service/src/redux/actions/actions.js"],"names":["action","memsApi","updateMemSuccess","mem","type","UPDATE_MEM","addMemSuccess","ADD_MEM","payload","memsFetchedSuccess","mems","FETCH_MEMS_SUCCESS","memsFetched","dispatch","getMems","then","catch","error","updateMem","console","log","changeMem","addMem","postMem","addedMem"],"mappings":"AAAA,OAAO,KAAKA,MAAZ,MAAwB,eAAxB;AACA,OAAO,KAAKC,OAAZ,MAAyB,mBAAzB;AAEA,OAAO,SAASC,gBAAT,CAA0BC,GAA1B,EAA+B;AACpC,SAAO;AACLC,IAAAA,IAAI,EAAEJ,MAAM,CAACK,UADR;AAELF,IAAAA;AAFK,GAAP;AAID;AAED,OAAO,SAASG,aAAT,CAAuBH,GAAvB,EAA4B;AACjC,SAAO;AACLC,IAAAA,IAAI,EAAEJ,MAAM,CAACO,OADR;AAELC,IAAAA,OAAO,EAAEL;AAFJ,GAAP;AAID;AAED,OAAO,SAASM,kBAAT,CAA4BC,IAA5B,EAAkC;AACvC,SAAO;AACLN,IAAAA,IAAI,EAAEJ,MAAM,CAACW,kBADR;AAELH,IAAAA,OAAO,EAAEE;AAFJ,GAAP;AAID;AAED,OAAO,SAASE,WAAT,GAAuB;AAC5B,SAAO,UAAUC,QAAV,EAAoB;AACzB,WAAOZ,OAAO,CACXa,OADI,GAEJC,IAFI,CAEEL,IAAD,IAAU;AACdG,MAAAA,QAAQ,CAACJ,kBAAkB,CAACC,IAAD,CAAnB,CAAR;AACD,KAJI,EAKJM,KALI,CAKGC,KAAD,IAAW;AAChB,YAAMA,KAAN;AACD,KAPI,CAAP;AAQD,GATD;AAUD;AAED,OAAO,SAASC,SAAT,CAAmBf,GAAnB,EAAwB;AAC7B,SAAO,UAAUU,QAAV,EAAoB;AACzBM,IAAAA,OAAO,CAACC,GAAR,CAAY,2BAAZ,EAAyCjB,GAAzC;AACA,WAAOF,OAAO,CACXiB,SADI,CACMf,GADN,EAEJY,IAFI,CAEEM,SAAD,IAAe;AACnBR,MAAAA,QAAQ,CAACX,gBAAgB,CAACmB,SAAD,CAAjB,CAAR;AACD,KAJI,EAKJL,KALI,CAKGC,KAAD,IAAW;AAChB,YAAMA,KAAN;AACD,KAPI,CAAP;AAQD,GAVD;AAWD;AAED,OAAO,SAASK,MAAT,CAAgBnB,GAAhB,EAAqB;AAC1B,SAAO,UAAUU,QAAV,EAAoB;AACzB,WAAOZ,OAAO,CACXsB,OADI,CACIpB,GADJ,EAEJY,IAFI,CAEES,QAAD,IAAc;AAClBX,MAAAA,QAAQ,CAACP,aAAa,CAACkB,QAAD,CAAd,CAAR;AACD,KAJI,EAKJR,KALI,CAKGC,KAAD,IAAW;AAChB,YAAMA,KAAN;AACD,KAPI,CAAP;AAQD,GATD;AAUD","sourcesContent":["import * as action from \"./actionsType\";\nimport * as memsApi from \"../../api/memsApi\";\n\nexport function updateMemSuccess(mem) {\n  return {\n    type: action.UPDATE_MEM,\n    mem,\n  };\n}\n\nexport function addMemSuccess(mem) {\n  return {\n    type: action.ADD_MEM,\n    payload: mem,\n  };\n}\n\nexport function memsFetchedSuccess(mems) {\n  return {\n    type: action.FETCH_MEMS_SUCCESS,\n    payload: mems,\n  };\n}\n\nexport function memsFetched() {\n  return function (dispatch) {\n    return memsApi\n      .getMems()\n      .then((mems) => {\n        dispatch(memsFetchedSuccess(mems));\n      })\n      .catch((error) => {\n        throw error;\n      });\n  };\n}\n\nexport function updateMem(mem) {\n  return function (dispatch) {\n    console.log(\"Tutaj już wrzucam do bazy\", mem);\n    return memsApi\n      .updateMem(mem)\n      .then((changeMem) => {\n        dispatch(updateMemSuccess(changeMem));\n      })\n      .catch((error) => {\n        throw error;\n      });\n  };\n}\n\nexport function addMem(mem) {\n  return function (dispatch) {\n    return memsApi\n      .postMem(mem)\n      .then((addedMem) => {\n        dispatch(addMemSuccess(addedMem));\n      })\n      .catch((error) => {\n        throw error;\n      });\n  };\n}\n"]},"metadata":{},"sourceType":"module"}