{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\amielnic\\\\Desktop\\\\angular\\\\mem-serwice\\\\mem-service\\\\src\\\\component\\\\MemsList.js\";\nimport React, { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { withRouter } from \"react-router-dom\";\nimport { memsFetched, updateMem } from \"../redux/actions/memActions\";\nimport { bindActionCreators } from \"redux\";\nimport { useLocation } from \"react-router-dom\";\nimport MemsPage from \"./MemsPage\";\n\nconst MemsList = props => {\n  const [fetchData, setData] = useState([]);\n  useEffect(() => {\n    const fetch = props.memsFetched();\n    setData(fetch);\n  }, []);\n\n  const handleUpvoteMem = async mem => {\n    let newMem = { ...mem\n    };\n    console.log(\"Upvote\", newMem);\n    newMem.upvotes = newMem.upvotes + 1;\n    console.log(\"Upvote\", newMem);\n    await props.updateMem(newMem); // await props.memsFetched();\n  };\n\n  const handleDownvoteMem = async mem => {\n    let newMem = { ...mem\n    };\n    newMem.downvotes = newMem.downvotes - 1;\n    await props.updateMem(newMem); // await props.memsFetched();\n  };\n\n  if (useLocation().pathname === \"/hot\") {\n    return /*#__PURE__*/React.createElement(MemsPage, {\n      mems: props.mems.hots,\n      handleUpvoteMem: handleUpvoteMem,\n      handleDownvoteMem: handleDownvoteMem,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 7\n      }\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(MemsPage, {\n    mems: props.mems.regulars,\n    handleUpvoteMem: handleUpvoteMem,\n    handleDownvoteMem: handleDownvoteMem,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 5\n    }\n  });\n};\n\nconst mapStateToProps = state => {\n  console.log(\"mapStateToPorps\", state);\n  return {\n    mems: state.mems\n  };\n};\n\nconst mapDispatchToProps = dispatch => bindActionCreators({\n  memsFetched,\n  updateMem\n}, dispatch);\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withRouter(MemsList));","map":{"version":3,"sources":["C:/Users/amielnic/Desktop/angular/mem-serwice/mem-service/src/component/MemsList.js"],"names":["React","useEffect","useState","connect","withRouter","memsFetched","updateMem","bindActionCreators","useLocation","MemsPage","MemsList","props","fetchData","setData","fetch","handleUpvoteMem","mem","newMem","console","log","upvotes","handleDownvoteMem","downvotes","pathname","mems","hots","regulars","mapStateToProps","state","mapDispatchToProps","dispatch"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,SAASC,WAAT,EAAsBC,SAAtB,QAAuC,6BAAvC;AACA,SAASC,kBAAT,QAAmC,OAAnC;AACA,SAASC,WAAT,QAA4B,kBAA5B;AACA,OAAOC,QAAP,MAAqB,YAArB;;AAEA,MAAMC,QAAQ,GAAIC,KAAD,IAAW;AACxB,QAAM,CAACC,SAAD,EAAYC,OAAZ,IAAuBX,QAAQ,CAAC,EAAD,CAArC;AAEFD,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMa,KAAK,GAAGH,KAAK,CAACN,WAAN,EAAd;AACAQ,IAAAA,OAAO,CAACC,KAAD,CAAP;AACD,GAHQ,EAGN,EAHM,CAAT;;AAKA,QAAMC,eAAe,GAAG,MAAOC,GAAP,IAAe;AACrC,QAAIC,MAAM,GAAG,EAAE,GAAGD;AAAL,KAAb;AACAE,IAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBF,MAAtB;AACAA,IAAAA,MAAM,CAACG,OAAP,GAAiBH,MAAM,CAACG,OAAP,GAAiB,CAAlC;AACAF,IAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBF,MAAtB;AACA,UAAMN,KAAK,CAACL,SAAN,CAAgBW,MAAhB,CAAN,CALqC,CAMrC;AACD,GAPD;;AASA,QAAMI,iBAAiB,GAAG,MAAOL,GAAP,IAAe;AACvC,QAAIC,MAAM,GAAG,EAAE,GAAGD;AAAL,KAAb;AACAC,IAAAA,MAAM,CAACK,SAAP,GAAmBL,MAAM,CAACK,SAAP,GAAmB,CAAtC;AACA,UAAMX,KAAK,CAACL,SAAN,CAAgBW,MAAhB,CAAN,CAHuC,CAIvC;AACD,GALD;;AAOA,MAAIT,WAAW,GAAGe,QAAd,KAA2B,MAA/B,EAAuC;AACrC,wBACE,oBAAC,QAAD;AACE,MAAA,IAAI,EAAEZ,KAAK,CAACa,IAAN,CAAWC,IADnB;AAEE,MAAA,eAAe,EAAEV,eAFnB;AAGE,MAAA,iBAAiB,EAAEM,iBAHrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF;AAOD;;AACD,sBACE,oBAAC,QAAD;AACE,IAAA,IAAI,EAAEV,KAAK,CAACa,IAAN,CAAWE,QADnB;AAEE,IAAA,eAAe,EAAEX,eAFnB;AAGE,IAAA,iBAAiB,EAAEM,iBAHrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF;AAOD,CAxCD;;AA0CA,MAAMM,eAAe,GAAIC,KAAD,IAAW;AACjCV,EAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAA+BS,KAA/B;AACA,SAAO;AACLJ,IAAAA,IAAI,EAAEI,KAAK,CAACJ;AADP,GAAP;AAGD,CALD;;AAOA,MAAMK,kBAAkB,GAAIC,QAAD,IACzBvB,kBAAkB,CAChB;AACEF,EAAAA,WADF;AAEEC,EAAAA;AAFF,CADgB,EAKhBwB,QALgB,CADpB;;AASA,eAAe3B,OAAO,CACpBwB,eADoB,EAEpBE,kBAFoB,CAAP,CAGbzB,UAAU,CAACM,QAAD,CAHG,CAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { withRouter } from \"react-router-dom\";\nimport { memsFetched, updateMem } from \"../redux/actions/memActions\";\nimport { bindActionCreators } from \"redux\";\nimport { useLocation } from \"react-router-dom\";\nimport MemsPage from \"./MemsPage\";\n\nconst MemsList = (props) => {\n    const [fetchData, setData] = useState([]);\n\n  useEffect(() => {\n    const fetch = props.memsFetched();\n    setData(fetch);\n  }, []);\n\n  const handleUpvoteMem = async (mem) => {\n    let newMem = { ...mem };\n    console.log(\"Upvote\", newMem);\n    newMem.upvotes = newMem.upvotes + 1;\n    console.log(\"Upvote\", newMem);\n    await props.updateMem(newMem);\n    // await props.memsFetched();\n  };\n\n  const handleDownvoteMem = async (mem) => {\n    let newMem = { ...mem };\n    newMem.downvotes = newMem.downvotes - 1;\n    await props.updateMem(newMem);\n    // await props.memsFetched();\n  };\n\n  if (useLocation().pathname === \"/hot\") {\n    return (\n      <MemsPage\n        mems={props.mems.hots}\n        handleUpvoteMem={handleUpvoteMem}\n        handleDownvoteMem={handleDownvoteMem}\n      />\n    );\n  }\n  return (\n    <MemsPage\n      mems={props.mems.regulars}\n      handleUpvoteMem={handleUpvoteMem}\n      handleDownvoteMem={handleDownvoteMem}\n    />\n  );\n};\n\nconst mapStateToProps = (state) => {\n  console.log(\"mapStateToPorps\", state);\n  return {\n    mems: state.mems,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) =>\n  bindActionCreators(\n    {\n      memsFetched,\n      updateMem,\n    },\n    dispatch\n  );\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(withRouter(MemsList));\n"]},"metadata":{},"sourceType":"module"}