{"ast":null,"code":"const url = \"http://localhost:3004/mems\";\nexport function getMems() {\n  return fetch(url).then(handleResponse).catch(handleError);\n}\nexport function addMem(mem) {\n  return fetch(url, {\n    method: \"POST\",\n    // POST for create, PUT to update when id already exists.\n    headers: {\n      \"content-type\": \"application/json\"\n    },\n    body: JSON.stringify(mem)\n  }).then(handleResponse).catch(handleError);\n}\nexport function updateMem(mem) {\n  return fetch(url + mem.id, {\n    method: \"PUT\",\n    // POST for create, PUT to update when id already exists.\n    headers: {\n      \"content-type\": \"application/json\"\n    },\n    body: JSON.stringify(mem)\n  }).then(handleResponse).catch(handleError);\n}\nexport async function handleResponse(response) {\n  if (response.ok) return response.json();\n\n  if (response.status === 400) {\n    // So, a server-side validation error occurred.\n    // Server side validation returns a string error message, so parse as text instead of json.\n    const error = await response.text();\n    throw new Error(error);\n  }\n\n  throw new Error(\"Network response was not ok.\");\n} // In a real app, would likely call an error logging service.\n\nexport function handleError(error) {\n  // eslint-disable-next-line no-console\n  console.error(\"API call failed. \" + error);\n  throw error;\n}","map":{"version":3,"sources":["C:/Users/amielnic/Desktop/angular/mem-serwice/mem-service/src/api/memsApi.js"],"names":["url","getMems","fetch","then","handleResponse","catch","handleError","addMem","mem","method","headers","body","JSON","stringify","updateMem","id","response","ok","json","status","error","text","Error","console"],"mappings":"AAAA,MAAMA,GAAG,GAAE,4BAAX;AAEA,OAAO,SAASC,OAAT,GAAkB;AACrB,SAAOC,KAAK,CAACF,GAAD,CAAL,CAAWG,IAAX,CAAgBC,cAAhB,EAAgCC,KAAhC,CAAsCC,WAAtC,CAAP;AACH;AAED,OAAO,SAASC,MAAT,CAAgBC,GAAhB,EAAoB;AACvB,SAAON,KAAK,CAACF,GAAD,EAAM;AACdS,IAAAA,MAAM,EAAE,MADM;AACE;AAChBC,IAAAA,OAAO,EAAE;AAAE,sBAAgB;AAAlB,KAFK;AAGdC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeL,GAAf;AAHQ,GAAN,CAAL,CAKFL,IALE,CAKGC,cALH,EAMFC,KANE,CAMIC,WANJ,CAAP;AAOC;AAGD,OAAO,SAASQ,SAAT,CAAmBN,GAAnB,EAAuB;AAC1B,SAAON,KAAK,CAACF,GAAG,GAAGQ,GAAG,CAACO,EAAX,EAAe;AACvBN,IAAAA,MAAM,EAAE,KADe;AACR;AACfC,IAAAA,OAAO,EAAE;AAAE,sBAAgB;AAAlB,KAFc;AAGvBC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeL,GAAf;AAHiB,GAAf,CAAL,CAKFL,IALE,CAKGC,cALH,EAMFC,KANE,CAMIC,WANJ,CAAP;AAOC;AAET,OAAO,eAAeF,cAAf,CAA8BY,QAA9B,EAAwC;AAC3C,MAAIA,QAAQ,CAACC,EAAb,EAAiB,OAAOD,QAAQ,CAACE,IAAT,EAAP;;AACjB,MAAIF,QAAQ,CAACG,MAAT,KAAoB,GAAxB,EAA6B;AAC3B;AACA;AACA,UAAMC,KAAK,GAAG,MAAMJ,QAAQ,CAACK,IAAT,EAApB;AACA,UAAM,IAAIC,KAAJ,CAAUF,KAAV,CAAN;AACD;;AACD,QAAM,IAAIE,KAAJ,CAAU,8BAAV,CAAN;AACD,C,CAED;;AACA,OAAO,SAAShB,WAAT,CAAqBc,KAArB,EAA4B;AACjC;AACAG,EAAAA,OAAO,CAACH,KAAR,CAAc,sBAAsBA,KAApC;AACA,QAAMA,KAAN;AACD","sourcesContent":["const url =\"http://localhost:3004/mems\";\r\n\r\nexport function getMems(){\r\n    return fetch(url).then(handleResponse).catch(handleError);\r\n}\r\n\r\nexport function addMem(mem){\r\n    return fetch(url, {\r\n        method: \"POST\", // POST for create, PUT to update when id already exists.\r\n        headers: { \"content-type\": \"application/json\" },\r\n        body: JSON.stringify(mem)\r\n      })\r\n        .then(handleResponse)\r\n        .catch(handleError);\r\n    }\r\n\r\n\r\n    export function updateMem(mem){\r\n        return fetch(url + mem.id, {\r\n            method: \"PUT\", // POST for create, PUT to update when id already exists.\r\n            headers: { \"content-type\": \"application/json\" },\r\n            body: JSON.stringify(mem)\r\n          })\r\n            .then(handleResponse)\r\n            .catch(handleError);\r\n        }\r\n\r\nexport async function handleResponse(response) {\r\n    if (response.ok) return response.json();\r\n    if (response.status === 400) {\r\n      // So, a server-side validation error occurred.\r\n      // Server side validation returns a string error message, so parse as text instead of json.\r\n      const error = await response.text();\r\n      throw new Error(error);\r\n    }\r\n    throw new Error(\"Network response was not ok.\");\r\n  }\r\n  \r\n  // In a real app, would likely call an error logging service.\r\n  export function handleError(error) {\r\n    // eslint-disable-next-line no-console\r\n    console.error(\"API call failed. \" + error);\r\n    throw error;\r\n  }"]},"metadata":{},"sourceType":"module"}