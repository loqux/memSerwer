{"ast":null,"code":"import { FETCH_MEMS_SUCCESS, UPDATE_MEM, ADD_MEM } from \"../actions/actionsType\";\nconst INIT_STATE = {\n  hots: [],\n  regulars: []\n};\n\nconst mems = (state = INIT_STATE, action) => {\n  switch (action.type) {\n    case FETCH_MEMS_SUCCESS:\n      return { ...state,\n        hots: action.payload.filter(mem => mem.upvotes + mem.downvotes > 5),\n        regulars: action.payload.filter(mem => mem.upvotes + mem.downvotes < 6)\n      };\n\n    case UPDATE_MEM:\n      return { ...state,\n        hots: state.hots.map(mem => mem.id === action.payload.id ? action.payload : mem).filter(mem => mem.upvotes + mem.downvotes > 5),\n        regulars: state.regulars.map(mem => mem.id === action.payload.id ? action.payload : mem).filter(mem => mem.upvotes + mem.downvotes < 6)\n      };\n\n    case ADD_MEM:\n      return { ...state,\n        regulars: [...state.regulars, { ...action.peyload\n        }]\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default mems;","map":{"version":3,"sources":["C:/Users/amielnic/Desktop/angular/mem-serwice/mem-service/src/redux/reducer/memsReducer.js"],"names":["FETCH_MEMS_SUCCESS","UPDATE_MEM","ADD_MEM","INIT_STATE","hots","regulars","mems","state","action","type","payload","filter","mem","upvotes","downvotes","map","id","peyload"],"mappings":"AAAA,SACEA,kBADF,EAEEC,UAFF,EAGEC,OAHF,QAIO,wBAJP;AAMA,MAAMC,UAAU,GAAG;AACjBC,EAAAA,IAAI,EAAE,EADW;AAEjBC,EAAAA,QAAQ,EAAE;AAFO,CAAnB;;AAKA,MAAMC,IAAI,GAAG,CAACC,KAAK,GAAGJ,UAAT,EAAqBK,MAArB,KAAgC;AAC3C,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKT,kBAAL;AACE,aAAO,EACL,GAAGO,KADE;AAELH,QAAAA,IAAI,EAAEI,MAAM,CAACE,OAAP,CAAeC,MAAf,CAAuBC,GAAD,IAASA,GAAG,CAACC,OAAJ,GAAcD,GAAG,CAACE,SAAlB,GAA8B,CAA7D,CAFD;AAGLT,QAAAA,QAAQ,EAAEG,MAAM,CAACE,OAAP,CAAeC,MAAf,CACPC,GAAD,IAASA,GAAG,CAACC,OAAJ,GAAcD,GAAG,CAACE,SAAlB,GAA8B,CAD/B;AAHL,OAAP;;AAOF,SAAKb,UAAL;AACE,aAAO,EACL,GAAGM,KADE;AAELH,QAAAA,IAAI,EAAEG,KAAK,CAACH,IAAN,CACHW,GADG,CACEH,GAAD,IAAUA,GAAG,CAACI,EAAJ,KAAWR,MAAM,CAACE,OAAP,CAAeM,EAA1B,GAA+BR,MAAM,CAACE,OAAtC,GAAgDE,GAD3D,EAEHD,MAFG,CAEKC,GAAD,IAASA,GAAG,CAACC,OAAJ,GAAcD,GAAG,CAACE,SAAlB,GAA8B,CAF3C,CAFD;AAKLT,QAAAA,QAAQ,EAAEE,KAAK,CAACF,QAAN,CACPU,GADO,CACFH,GAAD,IAAUA,GAAG,CAACI,EAAJ,KAAWR,MAAM,CAACE,OAAP,CAAeM,EAA1B,GAA+BR,MAAM,CAACE,OAAtC,GAAgDE,GADvD,EAEPD,MAFO,CAECC,GAAD,IAASA,GAAG,CAACC,OAAJ,GAAcD,GAAG,CAACE,SAAlB,GAA8B,CAFvC;AALL,OAAP;;AASF,SAAKZ,OAAL;AACE,aAAO,EAAE,GAAGK,KAAL;AAAYF,QAAAA,QAAQ,EAAE,CAAC,GAAGE,KAAK,CAACF,QAAV,EAAoB,EAAE,GAAGG,MAAM,CAACS;AAAZ,SAApB;AAAtB,OAAP;;AACF;AACE,aAAOV,KAAP;AAtBJ;AAwBD,CAzBD;;AA2BA,eAAeD,IAAf","sourcesContent":["import {\n  FETCH_MEMS_SUCCESS,\n  UPDATE_MEM,\n  ADD_MEM,\n} from \"../actions/actionsType\";\n\nconst INIT_STATE = {\n  hots: [],\n  regulars: [],\n};\n\nconst mems = (state = INIT_STATE, action) => {\n  switch (action.type) {\n    case FETCH_MEMS_SUCCESS:\n      return {\n        ...state,\n        hots: action.payload.filter((mem) => mem.upvotes + mem.downvotes > 5),\n        regulars: action.payload.filter(\n          (mem) => mem.upvotes + mem.downvotes < 6\n        ),\n      };\n    case UPDATE_MEM:\n      return {\n        ...state,\n        hots: state.hots\n          .map((mem) => (mem.id === action.payload.id ? action.payload : mem))\n          .filter((mem) => mem.upvotes + mem.downvotes > 5),\n        regulars: state.regulars\n          .map((mem) => (mem.id === action.payload.id ? action.payload : mem))\n          .filter((mem) => mem.upvotes + mem.downvotes < 6),\n      };\n    case ADD_MEM:\n      return { ...state, regulars: [...state.regulars, { ...action.peyload }] };\n    default:\n      return state;\n  }\n};\n\nexport default mems;\n"]},"metadata":{},"sourceType":"module"}